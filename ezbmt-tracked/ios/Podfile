# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage
Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
use_frameworks! :linkage => linkage.to_sym
else
use_frameworks! :linkage => :static
end

target 'ezbmt' do
config = use_native_modules!

use_react_native!(
:path => config[:reactNativePath],
# An absolute path to your application root.
:app_path => "#{Pod::Config.instance.installation_root}/.."
# :hermes_enabled => true, # 預設為 true，如需暫時關閉可設 false
)

post_install do |installer|
# React Native 預設後處理
react_native_post_install(
installer,
config[:reactNativePath],
:mac_catalyst_enabled => false
)

# 關閉 Xcode 15 的 User Script Sandboxing（解 rsync sandbox 錯誤）
installer.pods_project.targets.each do |t|
  t.build_configurations.each do |bc|
    bc.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
  end
end
installer.pods_project.save

installer.aggregate_targets.each do |agg|
  agg.user_project.native_targets.each do |t|
    t.build_configurations.each do |bc|
      bc.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'NO'
    end
  end
  agg.user_project.save
end

# 讓 VisionCamera 以 module 方式匯入（避免 modulemap 類型錯誤）
vc = installer.pods_project.targets.find { |t| t.name == 'VisionCamera' }
if vc
  vc.build_configurations.each do |bc|
    bc.build_settings['DEFINES_MODULE'] = 'YES'
    bc.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
  end
end
end end
